//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright(c) 2019 Wind River Systems, Inc. */

// Code generated by deepequal-gen. DO NOT EDIT.

package aliases

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AliasMap) DeepEqual(other *AliasMap) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for key, inValue := range *in {
			if otherValue, present := (*other)[key]; !present {
				return false
			} else {
				if inValue != otherValue {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AliasSlice) DeepEqual(other *AliasSlice) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for i, inElement := range *in {
			if inElement != (*other)[i] {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *AliasStruct) DeepEqual(other *AliasStruct) bool {
	if other == nil {
		return false
	}

	if in.X != other.X {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Foo) DeepEqual(other *Foo) bool {
	if other == nil {
		return false
	}

	if in.X != other.X {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *FooAlias) DeepEqual(other *FooAlias) bool {
	if other == nil {
		return false
	}

	if in.X != other.X {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *FooMap) DeepEqual(other *FooMap) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for key, inValue := range *in {
			if otherValue, present := (*other)[key]; !present {
				return false
			} else {
				if !inValue.DeepEqual(&otherValue) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *FooSlice) DeepEqual(other *FooSlice) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for i, inElement := range *in {
			if !inElement.DeepEqual(&(*other)[i]) {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Map) DeepEqual(other *Map) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for key, inValue := range *in {
			if otherValue, present := (*other)[key]; !present {
				return false
			} else {
				if inValue != otherValue {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Slice) DeepEqual(other *Slice) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for i, inElement := range *in {
			if inElement != (*other)[i] {
				return false
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Struct) DeepEqual(other *Struct) bool {
	if other == nil {
		return false
	}

	if in.X != other.X {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Ttest) DeepEqual(other *Ttest) bool {
	if other == nil {
		return false
	}

	if in.Builtin != other.Builtin {
		return false
	}
	if ((in.Slice != nil) && (other.Slice != nil)) || ((in.Slice == nil) != (other.Slice == nil)) {
		in, other := &in.Slice, &other.Slice
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if (in.Pointer == nil) != (other.Pointer == nil) {
		return false
	} else if in.Pointer != nil {
		if *in.Pointer != *other.Pointer {
			return false
		}
	}

	if (in.PointerAlias == nil) != (other.PointerAlias == nil) {
		return false
	} else if in.PointerAlias != nil {
		if *in.PointerAlias != *other.PointerAlias {
			return false
		}
	}

	if in.Struct != other.Struct {
		return false
	}

	if ((in.Map != nil) && (other.Map != nil)) || ((in.Map == nil) != (other.Map == nil)) {
		in, other := &in.Map, &other.Map
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.SliceSlice != nil) && (other.SliceSlice != nil)) || ((in.SliceSlice == nil) != (other.SliceSlice == nil)) {
		in, other := &in.SliceSlice, &other.SliceSlice
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	if ((in.MapSlice != nil) && (other.MapSlice != nil)) || ((in.MapSlice == nil) != (other.MapSlice == nil)) {
		in, other := &in.MapSlice, &other.MapSlice
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if !inValue.DeepEqual(&otherValue) {
						return false
					}
				}
			}
		}
	}

	if in.FooAlias != other.FooAlias {
		return false
	}

	if ((in.FooSlice != nil) && (other.FooSlice != nil)) || ((in.FooSlice == nil) != (other.FooSlice == nil)) {
		in, other := &in.FooSlice, &other.FooSlice
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if in.AliasBuiltin != other.AliasBuiltin {
		return false
	}
	if ((in.AliasSlice != nil) && (other.AliasSlice != nil)) || ((in.AliasSlice == nil) != (other.AliasSlice == nil)) {
		in, other := &in.AliasSlice, &other.AliasSlice
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if (in.AliasPointer == nil) != (other.AliasPointer == nil) {
		return false
	} else if in.AliasPointer != nil {
		if *in.AliasPointer != *other.AliasPointer {
			return false
		}
	}

	if in.AliasStruct != other.AliasStruct {
		return false
	}

	if ((in.AliasMap != nil) && (other.AliasMap != nil)) || ((in.AliasMap == nil) != (other.AliasMap == nil)) {
		in, other := &in.AliasMap, &other.AliasMap
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	return true
}
